/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –≤–∞–∫–∞–Ω—Å–∏–π
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
 * –í–µ—Ä—Å–∏—è 2.0 - —É–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ LinkedIn, Indeed, Glassdoor
 */

const axios = require('axios');
const cheerio = require('cheerio');
const fs = require('fs');
const path = require('path');
const { JSDOM } = require('jsdom');
const puppeteer = require('puppeteer');

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞
const DATA_DIR = path.join(__dirname, 'data');
if (!fs.existsSync(DATA_DIR)) {
  fs.mkdirSync(DATA_DIR, { recursive: true, mode: 0o777 });
  console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: ${DATA_DIR}`);
}

const CACHE_DIR = path.join(DATA_DIR, 'job_cache');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(CACHE_DIR)) {
  fs.mkdirSync(CACHE_DIR, { recursive: true, mode: 0o777 });
  console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫—ç—à–∞ –≤–∞–∫–∞–Ω—Å–∏–π: ${CACHE_DIR}`);
}

// User-Agent —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
const USER_AGENTS = {
  chrome: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36',
  firefox: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0',
  safari: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Safari/605.1.15'
};

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π User-Agent –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
function getRandomUserAgent() {
  const agents = Object.values(USER_AGENTS);
  return agents[Math.floor(Math.random() * agents.length)];
}

/**
 * –ü–∞—Ä—Å–∏—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
 * @param {string} url - URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∞–∫–∞–Ω—Å–∏–∏
 * @param {string} jobId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏
 * @param {Object} jobData - –î–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ JobTracker
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
async function parseJob(url, jobId, jobData = {}) {
  if (!url || !url.startsWith('http')) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π URL –≤–∞–∫–∞–Ω—Å–∏–∏');
  }

  console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–∏: ${url} —Å ID: ${jobId}`);
  console.log(`üìÇ –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫—ç—à–∞: ${CACHE_DIR}`);

  try {
    // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
    const jobDir = path.join(CACHE_DIR, jobId);
    if (!fs.existsSync(jobDir)) {
      fs.mkdirSync(jobDir, { recursive: true, mode: 0o777 });
      console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏: ${jobDir}`);
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const debugInfo = {
      jobId,
      url,
      parsedAt: new Date().toISOString(),
      jobData
    };
    
    fs.writeFileSync(
      path.join(jobDir, 'debug_info.json'),
      JSON.stringify(debugInfo, null, 2)
    );
    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    const domain = extractDomain(url);
    const strategy = selectParsingStrategy(url, domain);
    console.log(`üîß –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞: ${strategy.name}`);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
    return await strategy.parse(url, jobId, jobData, jobDir);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}:`);
    console.error(error);
    throw error;
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–º–µ–Ω –∏–∑ URL
 * @param {string} url - URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * @returns {string} - –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω
 */
function extractDomain(url) {
  try {
    const urlObject = new URL(url);
    return urlObject.hostname.toLowerCase();
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–æ–º–µ–Ω–∞: ${error.message}`);
    return '';
  }
}

/**
 * –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç URL –∏ –¥–æ–º–µ–Ω–∞
 * @param {string} url - URL –≤–∞–∫–∞–Ω—Å–∏–∏
 * @param {string} domain - –î–æ–º–µ–Ω —Å–∞–π—Ç–∞
 * @returns {Object} - –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
function selectParsingStrategy(url, domain) {
  // LinkedIn —Ç—Ä–µ–±—É–µ—Ç –æ—Å–æ–±–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
  if (domain.includes('linkedin.com')) {
    if (url.includes('/jobs/view/')) {
      return {
        name: 'LinkedIn API',
        sourceType: 'linkedin',
        parse: parseLinkedInJob
      };
    } else {
      return {
        name: 'LinkedIn Fallback',
        sourceType: 'linkedin-fallback',
        parse: parseWithBrowser
      };
    }
  }
  
  // Indeed –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
  if (domain.includes('indeed.com')) {
    return {
      name: 'Indeed Browser',
      sourceType: 'indeed',
      parse: parseWithBrowser
    };
  }
  
  // Glassdoor —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã
  if (domain.includes('glassdoor.com')) {
    return {
      name: 'Glassdoor Stealth',
      sourceType: 'glassdoor',
      parse: parseWithBrowser
    };
  }
  
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
  return {
    name: 'Standard Browser',
    sourceType: 'generic',
    parse: parseWithBrowser
  };
}
/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è LinkedIn
 * @param {string} url - URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∞–∫–∞–Ω—Å–∏–∏ LinkedIn
 * @param {string} jobId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏
 * @param {Object} jobData - –î–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏
 * @param {string} jobDir - –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
async function parseLinkedInJob(url, jobId, jobData, jobDir) {
  console.log(`üî∑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è LinkedIn`);
  
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–∞–∫–∞–Ω—Å–∏–∏ LinkedIn –∏–∑ URL
    const matches = url.match(/\/jobs\/view\/([0-9]+)/);
    if (!matches || !matches[1]) {
      console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –≤–∞–∫–∞–Ω—Å–∏–∏ LinkedIn, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥`);
      return await parseWithBrowser(url, jobId, jobData, jobDir);
    }
    
    const linkedInJobId = matches[1];
    console.log(`üîë –ò–∑–≤–ª–µ—á–µ–Ω ID –≤–∞–∫–∞–Ω—Å–∏–∏ LinkedIn: ${linkedInJobId}`);
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ LinkedIn API –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try {
      const apiUrl = `https://www.linkedin.com/jobs-guest/jobs/api/jobPosting/${linkedInJobId}`;
      console.log(`üåê –ó–∞–ø—Ä–æ—Å –∫ LinkedIn API: ${apiUrl}`);
      
      const response = await axios.get(apiUrl, {
        headers: {
          'User-Agent': USER_AGENTS.chrome,
          'Accept': 'text/html,application/xhtml+xml,application/xml'
        },
        timeout: 10000
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π HTML
      const html = response.data;
      const htmlPath = path.join(jobDir, 'page.html');
      fs.writeFileSync(htmlPath, html);
      
      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é cheerio
      const $ = cheerio.load(html);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      const title = $('.top-card-layout__title').text().trim() || jobData.position || 'Unknown Position';
      const company = $('.topcard__org-name-link').text().trim() || jobData.company || 'Unknown Company';
      const location = $('.topcard__flavor--bullet').text().trim() || 'Unknown Location';
      const description = $('.description__text').text().trim() || 'No description available';
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      let seniority = '';
      $('.description__job-criteria-item').each((i, el) => {
        const label = $(el).find('.description__job-criteria-subheader').text().trim();
        const value = $(el).find('.description__job-criteria-text').text().trim();
        
        if (label.includes('Seniority')) {
          seniority = value;
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é
      const textPath = path.join(jobDir, 'content.txt');
      fs.writeFileSync(textPath, description);
      
      // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ Puppeteer
      let screenshotPath = null;
      try {
        const browser = await puppeteer.launch({
          headless: "new",
          args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        const page = await browser.newPage();
        await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 30000 });
        screenshotPath = path.join(jobDir, 'screenshot.png');
        await page.screenshot({ path: screenshotPath, fullPage: true });
        await browser.close();
      } catch (screenshotError) {
        console.error(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: ${screenshotError.message}`);
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return {
        jobId,
        url,
        title,
        company,
        location,
        seniority,
        description,
        parsedAt: new Date().toISOString(),
        sourceType: 'linkedin',
        files: {
          html: htmlPath,
          text: textPath,
          screenshot: screenshotPath
        }
      };
    } catch (apiError) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ LinkedIn API: ${apiError.message}`);
      console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø–æ–º–æ—â—å—é –±—Ä–∞—É–∑–µ—Ä–∞`);
      return await parseWithBrowser(url, jobId, jobData, jobDir);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ LinkedIn: ${error.message}`);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const textPath = path.join(jobDir, 'content.txt');
    fs.writeFileSync(textPath, 
      `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏ LinkedIn.
      –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ: ${url}`
    );
    
    return {
      jobId,
      url,
      title: jobData.position || 'Unknown Position',
      company: jobData.company || 'Unknown Company',
      description: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏ LinkedIn. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.',
      parsedAt: new Date().toISOString(),
      sourceType: 'linkedin-fallback',
      note: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º LinkedIn. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞–ø—Ä—è–º—É—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ.',
      files: {
        text: textPath
      }
    };
  }
}

/**
 * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Puppeteer
 * @param {string} url - URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∞–∫–∞–Ω—Å–∏–∏
 * @param {string} jobId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏
 * @param {Object} jobData - –î–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏
 * @param {string} jobDir - –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
async function parseWithBrowser(url, jobId, jobData, jobDir) {
  // –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ JavaScript-—Å–∞–π—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º puppeteer
  console.log(`ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Puppeteer...`);
  const browser = await puppeteer.launch({
    headless: "new", // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º headless –¥–ª—è Puppeteer
    args: [
      '--no-sandbox', 
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-accelerated-2d-canvas',
      '--disable-gpu',
      '--window-size=1920,1080'
    ],
    defaultViewport: {
      width: 1920,
      height: 1080
    }
  });

  try {
    console.log(`‚úÖ Puppeteer –∑–∞–ø—É—â–µ–Ω`);
    const page = await browser.newPage();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent –∫–∞–∫ —É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
    await page.setUserAgent(getRandomUserAgent());
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    await page.setRequestInterception(true);
    page.on('request', (request) => {
      const resourceType = request.resourceType();
      if (['image', 'font', 'media'].includes(resourceType)) {
        request.abort();
      } else {
        request.continue();
      }
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    page.on('console', msg => console.log(`üåê –ö–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞: ${msg.text()}`));
    page.on('pageerror', error => console.log(`üî¥ –û—à–∏–±–∫–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: ${error.message}`));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∏ –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    console.log(`üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${url}`);
    try {
      await page.goto(url, {
        waitUntil: 'networkidle2',
        timeout: 30000
      });
      console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
    } catch (navError) {
      console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${navError.message}`);
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º —Å–µ—Ç–∏, –ø—Ä–æ–±—É–µ–º —Ö–æ—Ç—è –±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ DOM
      await page.goto(url, {
        waitUntil: 'domcontentloaded',
        timeout: 30000
      });
      console.log(`‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ (—Ç–æ–ª—å–∫–æ DOM)`);
    }

    // –°–∫—Ä–æ–ª–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    console.log(`üìú –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...`);
    await autoScroll(page);
    console.log(`‚úÖ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);

    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const screenshotPath = path.join(jobDir, 'screenshot.png');
    try {
      console.log(`üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã...`);
      await page.screenshot({
        path: screenshotPath,
        fullPage: true
      });
      console.log(`‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏: ${screenshotPath}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
      if (fs.existsSync(screenshotPath)) {
        const stats = fs.statSync(screenshotPath);
        console.log(`üìä –†–∞–∑–º–µ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ${stats.size} –±–∞–π—Ç`);
      } else {
        console.error(`‚ùå –§–∞–π–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω!`);
      }
    } catch (screenshotError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ${screenshotError.message}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    console.log(`üìÑ –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã...`);
    const html = await page.content();
    const htmlPath = path.join(jobDir, 'page.html');
    fs.writeFileSync(htmlPath, html);
    console.log(`‚úÖ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏: ${htmlPath}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª HTML –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
    if (fs.existsSync(htmlPath)) {
      const stats = fs.statSync(htmlPath);
      console.log(`üìä –†–∞–∑–º–µ—Ä HTML: ${stats.size} –±–∞–π—Ç`);
    } else {
      console.error(`‚ùå –§–∞–π–ª HTML –Ω–µ —Å–æ–∑–¥–∞–Ω!`);
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    await browser.close();
    console.log(`üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç`);

    // –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å –ø–æ–º–æ—â—å—é cheerio
    const $ = cheerio.load(html);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const title = extractTitle($, page.url()) || jobData.position || '';
    const h1 = $('h1').first().text().trim();
    console.log(`üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${title}`);
    console.log(`üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫ H1: ${h1}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    let text = '';
    $('body').find('p, h1, h2, h3, h4, h5, h6, li').each((i, el) => {
      const content = $(el).text().trim();
      if (content) {
        text += content + '\n\n';
      }
    });

    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç—É
    const salaryPattern = /(?:\$|¬£|‚Ç¨|\¬•|RUB|USD|EUR|—Ä—É–±|–æ—Ç|–¥–æ|\d+\s*\-\s*\d+|\d+\s*–∫|\d+[,.\s]\d+)[^.]*?(?:\d[\d\s,.]*\d|\d+)(?:\s*[\-‚Äì]\s*(?:\d[\d\s,.]*\d|\d+))?/gi;
    const salaryMatches = html.match(salaryPattern);
    const salary = salaryMatches ? salaryMatches[0] : null;
    console.log(`üí∞ –ù–∞–π–¥–µ–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ${salary || '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);

    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    let location = '';
    $('[class*="location"], [data-test="location"], [class*="LocationMetaTag"]').each((i, el) => {
      const text = $(el).text().trim();
      if (text && text.length < 100) {
        location = text;
        return false; // –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
      }
    });
    console.log(`üìç –ù–∞–π–¥–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${location || '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);

    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é
    let company = '';
    $('meta[property="og:site_name"]').each((i, el) => {
      company = $(el).attr('content');
    });

    if (!company) {
      $('[class*="company"], [class*="employer"], [id*="company"], [id*="employer"]').each((i, el) => {
        const text = $(el).text().trim();
        if (text && text.length < 100) {  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞—Ö–≤–∞—Ç –±–æ–ª—å—à–∏—Ö –±–ª–æ–∫–æ–≤
          company = text;
          return false; // –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
        }
      });
    }
    console.log(`üè¢ –ù–∞–π–¥–µ–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è: ${company || '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
    let description = '';
    $('[class*="description"], [class*="job-details"], [id*="job-description"], [class*="content"]').each((i, el) => {
      const content = $(el).text().trim();
      if (content && content.length > description.length) {
        description = content;
      }
    });

    // –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
    if (!description) {
      description = text;
    }
    console.log(`üìù –î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è: ${description.length} —Å–∏–º–≤–æ–ª–æ–≤`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    const textPath = path.join(jobDir, 'content.txt');
    fs.writeFileSync(textPath, description);
    console.log(`‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ –ø—É—Ç–∏: ${textPath}`);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
    if (fs.existsSync(textPath)) {
      const stats = fs.statSync(textPath);
      console.log(`üìä –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: ${stats.size} –±–∞–π—Ç`);
    } else {
      console.error(`‚ùå –§–∞–π–ª —Ç–µ–∫—Å—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω!`);
    }

    // –î–æ–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏–∏
    if (!title && jobData.position) {
      title = jobData.position;
    }
    
    if (!company && jobData.company) {
      company = jobData.company;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
    const domain = extractDomain(url);
    let sourceType = 'generic';
    
    if (domain.includes('linkedin.com')) sourceType = 'linkedin';
    else if (domain.includes('indeed.com')) sourceType = 'indeed';
    else if (domain.includes('glassdoor.com')) sourceType = 'glassdoor';

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result = {
      jobId,
      url,
      title: title || h1,
      h1,
      company,
      salary,
      location,
      description,
      sourceType,
      parsedAt: new Date().toISOString(),
      files: {
        html: htmlPath,
        screenshot: screenshotPath,
        text: textPath
      }
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
    const dataPath = path.join(jobDir, 'data.json');
    fs.writeFileSync(
      dataPath,
      JSON.stringify(result, null, 2)
    );
    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ –ø—É—Ç–∏: ${dataPath}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
    if (fs.existsSync(dataPath)) {
      const stats = fs.statSync(dataPath);
      console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö: ${stats.size} –±–∞–π—Ç`);
    } else {
      console.error(`‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–∑–¥–∞–Ω!`);
    }

    console.log(`üéâ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID: ${jobId}`);
    return result;
  } catch (error) {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if (browser) {
      await browser.close().catch(e => console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: ${e.message}`));
    }
    throw error;
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —É—á–µ—Ç–æ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ —Å–∞–π—Ç–∞
 * @param {Object} $ - –û–±—ä–µ–∫—Ç cheerio
 * @param {string} url - URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @returns {string} - –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
 */
function extractTitle($, url) {
  // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∞–π—Ç–∞
  if (url.includes('linkedin.com')) {
    // LinkedIn —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    const linkedinSelectors = [
      '.top-card-layout__title', 
      '.jobs-unified-top-card__job-title',
      '.jobs-details-top-card__job-title'
    ];
    
    for (const selector of linkedinSelectors) {
      const element = $(selector);
      if (element.length > 0) {
        return element.text().trim();
      }
    }
  } else if (url.includes('indeed.com')) {
    // Indeed —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    const indeedSelectors = [
      '.jobsearch-JobInfoHeader-title',
      '[data-testid="jobsearch-JobInfoHeader-title"]',
      '#jobsearch-ViewjobPaneWrapper h1'
    ];
    
    for (const selector of indeedSelectors) {
      const element = $(selector);
      if (element.length > 0) {
        return element.text().trim();
      }
    }
  } else if (url.includes('glassdoor.com')) {
    // Glassdoor —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    const glassdoorSelectors = [
      '.job-title',
      '.e1tk4kwz5',
      '[data-test="job-title"]'
    ];
    
    for (const selector of glassdoorSelectors) {
      const element = $(selector);
      if (element.length > 0) {
        return element.text().trim();
      }
    }
  }
  
  // –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –µ—Å–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
  const generalSelectors = [
    'h1.job-title',
    'h1.position-title',
    '.job-title h1',
    '.position-title h1',
    'h1[class*="title"]',
    'h1'
  ];
  
  for (const selector of generalSelectors) {
    const element = $(selector);
    if (element.length > 0) {
      return element.text().trim();
    }
  }
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  return $('title').text().trim();
}

/**
 * –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–Ω–∏–∑ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @param {Page} page - –æ–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã puppeteer
 */
async function autoScroll(page) {
  await page.evaluate(async () => {
    await new Promise((resolve) => {
      let totalHeight = 0;
      const distance = 100;
      const timer = setInterval(() => {
        const scrollHeight = document.body.scrollHeight;
        window.scrollBy(0, distance);
        totalHeight += distance;

        if (totalHeight >= scrollHeight) {
          clearInterval(timer);
          resolve();
        }
      }, 100);
    });
  });
}
/**
 * –ü–æ–ª—É—á–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∞–∫–∞–Ω—Å–∏–∏
 * @param {string} jobId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏
 * @returns {string|null} HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ null, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
function getJobHtml(jobId) {
  try {
    const jobDir = path.join(CACHE_DIR, jobId);
    const htmlPath = path.join(jobDir, 'page.html');
    
    if (fs.existsSync(htmlPath)) {
      return fs.readFileSync(htmlPath, 'utf8');
    }
    
    return null;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ HTML –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}: ${error.message}`);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∞–∫–∞–Ω—Å–∏–∏
 * @param {string} jobId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏
 * @returns {string|null} –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–ª–∏ null, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
function getJobScreenshotPath(jobId) {
  try {
    const jobDir = path.join(CACHE_DIR, jobId);
    const screenshotPath = path.join(jobDir, 'screenshot.png');
    
    if (fs.existsSync(screenshotPath)) {
      return screenshotPath;
    }
    
    return null;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}: ${error.message}`);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞–∫–∞–Ω—Å–∏–∏
 * @param {string} jobId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏
 * @returns {string|null} –¢–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ null, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
function getJobText(jobId) {
  try {
    const jobDir = path.join(CACHE_DIR, jobId);
    const textPath = path.join(jobDir, 'content.txt');
    
    if (fs.existsSync(textPath)) {
      return fs.readFileSync(textPath, 'utf8');
    }
    
    return null;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}: ${error.message}`);
    return null;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∞ –ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞
 * @param {string} jobId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏
 * @returns {boolean} true, –µ—Å–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞
 */
function isJobParsed(jobId) {
  try {
    const jobDir = path.join(CACHE_DIR, jobId);
    const dataPath = path.join(jobDir, 'data.json');
    return fs.existsSync(dataPath);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}: ${error.message}`);
    return false;
  }
}
function getJobData(jobId) {
  try {
    const jobDir = path.join(CACHE_DIR, jobId);
    const dataPath = path.join(jobDir, 'data.json');
    
    if (fs.existsSync(dataPath)) {
      const data = fs.readFileSync(dataPath, 'utf8');
      return JSON.parse(data);
    }
    
    return null;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}: ${error.message}`);
    return null;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª—è
module.exports = {
  parseJob,
  getJobData,
  getJobHtml,
  getJobScreenshotPath,
  getJobText,
  isJobParsed,
  CACHE_DIR
};