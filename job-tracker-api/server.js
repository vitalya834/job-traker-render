const express = require('express');
const fs = require('fs/promises');
const fsSync = require('fs');
const cors = require('cors');
const path = require('path');
const { v4: uuidv4 } = require('uuid');
const multer = require('multer');
const mime = require('mime-types'); // –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è MIME-—Ç–∏–ø–æ–≤

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –ø–∞—Ä—Å–µ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π
const jobParser = require('./jobparser');

const app = express();
const PORT = process.env.PORT || 5000;

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const DATA_DIR = path.join(__dirname, 'data');
if (!fsSync.existsSync(DATA_DIR)) {
    fsSync.mkdirSync(DATA_DIR, { recursive: true, mode: 0o777 });
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: ${DATA_DIR}`);
}

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π –≤–Ω—É—Ç—Ä–∏ data
const JOBS_DIR = path.join(DATA_DIR, 'jobs');
if (!fsSync.existsSync(JOBS_DIR)) {
    fsSync.mkdirSync(JOBS_DIR, { recursive: true, mode: 0o777 });
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π: ${JOBS_DIR}`);
}

// –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ CACHE_DIR –∏–∑ –º–æ–¥—É–ª—è –ø–∞—Ä—Å–µ—Ä–∞
const JOB_CACHE_DIR = jobParser.CACHE_DIR;
console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ç—à–∞ –≤–∞–∫–∞–Ω—Å–∏–π: ${JOB_CACHE_DIR}`);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
    destination: async (req, file, cb) => {
        try {
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–º–ø–∞–Ω–∏–∏
            const companyName = req.body.company || 'unnamed';
            const companyDir = path.join(JOBS_DIR, sanitizeFileName(companyName));
            
            console.log(`üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –∫–æ–º–ø–∞–Ω–∏—é: ${companyName}`);
            console.log(`üìÅ –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏: ${companyDir}`);
            
            if (!fsSync.existsSync(companyDir)) {
                await fs.mkdir(companyDir, { recursive: true, mode: 0o777 });
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: ${companyDir}`);
            }
            cb(null, companyDir);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏:`, error);
            cb(error);
        }
    },
    filename: (req, file, cb) => {
        const jobId = req.body.jobId || uuidv4();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å
        const originalExt = path.extname(file.originalname).toLowerCase();
        const allowedExtensions = ['.pdf', '.doc', '.docx', '.txt'];
        const safeExt = allowedExtensions.includes(originalExt) ? originalExt : '.txt';
        
        let fileName;
        if (file.fieldname === 'coverLetter') {
            fileName = `${jobId}_coverLetter${safeExt}`;
        } else if (file.fieldname === 'resume') {
            fileName = `${jobId}_resume${safeExt}`;
        } else {
            fileName = `${jobId}_${file.fieldname}${safeExt}`;
        }
        
        console.log(`üìÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏–º–µ–Ω–µ–º: ${fileName}`);
        cb(null, fileName);
    }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ç–∏–ø–æ–≤
const upload = multer({
    storage: storage,
    limits: { fileSize: 10 * 1024 * 1024 }, // 10MB
    fileFilter: (req, file, cb) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
        const allowedMimeTypes = [
            'application/pdf',
            'application/msword',
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'text/plain',
            // –î–æ–±–∞–≤–ª—è–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            'application/octet-stream' // –¥–ª—è –æ–±—â–∏—Ö –¥–≤–æ–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        ];
        
        // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
        cb(null, true);
        
        /* –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤
        if (allowedMimeTypes.includes(file.mimetype)) {
            cb(null, true);
        } else {
            console.log(`‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω —Ñ–∞–π–ª —Ç–∏–ø–∞: ${file.mimetype}`);
            cb(new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ ${file.mimetype}. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ PDF, DOC, DOCX –∏ TXT.`));
        }
        */
    }
});

// –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—É—Ç—è—Ö
function sanitizeFileName(fileName) {
    if (!fileName) return 'unnamed';
    return fileName.replace(/[^a-zA-Z0-9_-]/g, '_');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express
app.use(cors({
    origin: '*', // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true
}));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –ü–û –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`[${new Date().toISOString()}] ${req.method} ${req.originalUrl}`);
    next();
});

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data
app.use('/data', (req, res, next) => {
    console.log(`üìÇ –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ data: ${req.path}`);
    next();
}, express.static(DATA_DIR, {
    setHeaders: (res, filePath) => {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        const mimeType = mime.lookup(filePath) || 'application/octet-stream';
        res.setHeader('Content-Type', mimeType);
        console.log(`üìÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ ${filePath} —Å —Ç–∏–ø–æ–º ${mimeType}`);
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
        res.setHeader('Pragma', 'no-cache');
        res.setHeader('Expires', '0');
    }
}));

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π
app.get('/api/jobs', async (req, res) => {
    try {
        const jobs = await getAllJobs();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
        for (const job of jobs) {
            job.isParsed = jobParser.isJobParsed(job.id);
            
            // –ï—Å–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥
            if (job.isParsed) {
                job.parsedLinks = {
                    data: `/api/jobs/${job.id}/parsed`,
                    screenshot: `/api/jobs/${job.id}/screenshot`,
                    html: `/api/jobs/${job.id}/html`,
                    text: `/api/jobs/${job.id}/text`
                };
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ API
            if (job.coverLetterPath) {
                job.coverLetterUrl = `/api/files/${sanitizeFileName(job.company)}/${job.coverLetterPath}`;
            }
            if (job.resumePath) {
                job.resumeUrl = `/api/files/${sanitizeFileName(job.company)}/${job.resumePath}`;
            }
        }
        
        console.log(`üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º ${jobs.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
        res.json(jobs);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏', details: error.message });
    }
});

// –°–æ–∑–¥–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
app.get('/api/files/:companyName/:fileName', async (req, res) => {
    try {
        const { companyName, fileName } = req.params;
        const filePath = path.join(JOBS_DIR, sanitizeFileName(companyName), fileName);
        
        console.log(`üìÑ –ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞: ${filePath}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        try {
            await fs.access(filePath);
        } catch (error) {
            console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
            return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞
        const extension = path.extname(filePath).toLowerCase();
        let mimeType;
        
        switch (extension) {
            case '.pdf':
                mimeType = 'application/pdf';
                break;
            case '.doc':
                mimeType = 'application/msword';
                break;
            case '.docx':
                mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
                break;
            case '.txt':
                mimeType = 'text/plain';
                break;
            default:
                mimeType = 'application/octet-stream';
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        res.setHeader('Content-Type', mimeType);
        res.setHeader('Content-Disposition', `inline; filename="${fileName}"`);
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
        res.setHeader('Pragma', 'no-cache');
        res.setHeader('Expires', '0');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        console.log(`üìÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ ${filePath} —Å —Ç–∏–ø–æ–º ${mimeType}`);
        res.sendFile(filePath);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª', details: error.message });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ ID
app.get('/api/jobs/:id', async (req, res) => {
    try {
        const jobId = req.params.id;
        const job = await findJobById(jobId);
        
        if (!job) {
            return res.status(404).json({ error: '–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Å–∏–Ω–≥–µ
        job.isParsed = jobParser.isJobParsed(job.id);
        if (job.isParsed) {
            job.parsedLinks = {
                data: `/api/jobs/${job.id}/parsed`,
                screenshot: `/api/jobs/${job.id}/screenshot`,
                html: `/api/jobs/${job.id}/html`,
                text: `/api/jobs/${job.id}/text`
            };
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º URL –¥–ª—è —Ñ–∞–π–ª–æ–≤
        if (job.coverLetterPath) {
            job.coverLetterUrl = `/api/files/${sanitizeFileName(job.company)}/${job.coverLetterPath}`;
        }
        if (job.resumePath) {
            job.resumeUrl = `/api/files/${sanitizeFileName(job.company)}/${job.resumePath}`;
        }
        
        res.json(job);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ ${req.params.id}:`, error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é', details: error.message });
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
app.post('/api/jobs', upload.fields([
    { name: 'coverLetter', maxCount: 1 }, 
    { name: 'resume', maxCount: 1 }
]), async (req, res) => {
    try {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!req.body.company || !req.body.position) {
            return res.status(400).json({ error: '–ö–æ–º–ø–∞–Ω–∏—è –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏: ${req.body.position} –≤ ${req.body.company}`);

        const job = {
            id: uuidv4(),
            company: req.body.company,
            position: req.body.position,
            link: req.body.link || "",
            status: req.body.status || "sent",
            createdAt: new Date().toISOString(),
            notes: req.body.notes || "",
            interviewDate: req.body.interviewDate || null
        };

        const companyDir = path.join(JOBS_DIR, sanitizeFileName(job.company));
        if (!fsSync.existsSync(companyDir)) {
            await fs.mkdir(companyDir, { recursive: true, mode: 0o777 });
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: ${companyDir}`);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        console.log(`üìÅ –§–∞–π–ª—ã –≤ –∑–∞–ø—Ä–æ—Å–µ:`, req.files);
        
        // ---- –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ----
        // –í–º–µ—Å—Ç–æ —Ä—É—á–Ω–æ–π —Å–∫–ª–µ–π–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±–µ—Ä—ë–º –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—Å–≤–æ–∏–ª multer
        const coverLetterPath = req.files && req.files.coverLetter && req.files.coverLetter.length > 0
            ? req.files.coverLetter[0].filename
            : null;
        
        const resumePath = req.files && req.files.resume && req.files.resume.length > 0
            ? req.files.resume[0].filename
            : null;
        // --------------------------------

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –≤ –æ–±—ä–µ–∫—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
        job.coverLetterPath = coverLetterPath;
        job.resumePath = resumePath;

        console.log(`üìÑ –ü—É—Ç—å –∫ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º—É –ø–∏—Å—å–º—É: ${coverLetterPath || '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}`);
        console.log(`üìÑ –ü—É—Ç—å –∫ —Ä–µ–∑—é–º–µ: ${resumePath || '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}`);

        // –î–æ–±–∞–≤–ª—è–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
        if (coverLetterPath) {
            job.coverLetterUrl = `/api/files/${sanitizeFileName(job.company)}/${coverLetterPath}`;
        }
        if (resumePath) {
            job.resumeUrl = `/api/files/${sanitizeFileName(job.company)}/${resumePath}`;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –≤ —Ñ–∞–π–ª
        const jobFile = path.join(companyDir, `${job.id}.json`);
        await fs.writeFile(jobFile, JSON.stringify(job, null, 2));
        console.log(`‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: ${jobFile}`);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        if (job.link) {
            console.log(`üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${job.id} —Å URL ${job.link}`);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Ç–≤–µ—Ç
            jobParser.parseJob(job.link, job.id, job)
                .then(parsedData => {
                    console.log(`‚úÖ –í–∞–∫–∞–Ω—Å–∏—è ${job.id} —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Ñ–ª–∞–≥–æ–º, —á—Ç–æ –æ–Ω–∞ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞
                    fs.readFile(jobFile, 'utf8')
                        .then(data => {
                            try {
                                const updatedJob = JSON.parse(data);
                                updatedJob.parsed = true;
                                updatedJob.parsedAt = parsedData.parsedAt;
                                
                                fs.writeFile(jobFile, JSON.stringify(updatedJob, null, 2))
                                    .then(() => console.log(`‚úÖ –§–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏ ${job.id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞`))
                                    .catch(err => console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤–∞–∫–∞–Ω—Å–∏–∏:`, err));
                            } catch (parseErr) {
                                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –≤–∞–∫–∞–Ω—Å–∏–∏:`, parseErr);
                            }
                        })
                        .catch(err => console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤–∞–∫–∞–Ω—Å–∏–∏:`, err));
                })
                .catch(error => {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ${job.id}:`, error);
                });
        }

        res.status(201).json(job);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é', details: error.message });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
app.put('/api/jobs/:id', express.json(), async (req, res) => {
    try {
        const jobId = req.params.id;
        const updatedData = req.body;
        
        console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: ${jobId}`);
        console.log(`üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, updatedData);
        
        // –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–∏
        const job = await findJobById(jobId);
        if (!job) {
            return res.status(404).json({ error: '–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–∏
        const updatedJob = { ...job };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        const allowedFields = ['status', 'notes', 'interviewDate'];
        for (const field of allowedFields) {
            if (field in updatedData) {
                updatedJob[field] = updatedData[field];
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        updatedJob.updatedAt = new Date().toISOString();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        const companyDir = path.join(JOBS_DIR, sanitizeFileName(updatedJob.company));
        const jobFile = path.join(companyDir, `${jobId}.json`);
        
        await fs.writeFile(jobFile, JSON.stringify(updatedJob, null, 2));
        console.log(`‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: ${jobFile}`);
        
        res.json(updatedJob);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ ${req.params.id}:`, error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é', details: error.message });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
app.delete('/api/jobs/:id', async (req, res) => {
    try {
        const jobId = req.params.id;
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: ${jobId}`);
        
        // –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–∏
        const job = await findJobById(jobId);
        if (!job) {
            return res.status(404).json({ error: '–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–∞–∫–∞–Ω—Å–∏–∏
        const companyDir = path.join(JOBS_DIR, sanitizeFileName(job.company));
        const jobFile = path.join(companyDir, `${jobId}.json`);
        
        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏
        await fs.unlink(jobFile);
        console.log(`‚úÖ –§–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏ —É–¥–∞–ª–µ–Ω: ${jobFile}`);
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (job.coverLetterPath) {
            const coverLetterFile = path.join(companyDir, job.coverLetterPath);
            if (fsSync.existsSync(coverLetterFile)) {
                await fs.unlink(coverLetterFile);
                console.log(`‚úÖ –§–∞–π–ª —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ —É–¥–∞–ª–µ–Ω: ${coverLetterFile}`);
            }
        }
        
        if (job.resumePath) {
            const resumeFile = path.join(companyDir, job.resumePath);
            if (fsSync.existsSync(resumeFile)) {
                await fs.unlink(resumeFile);
                console.log(`‚úÖ –§–∞–π–ª —Ä–µ–∑—é–º–µ —É–¥–∞–ª–µ–Ω: ${resumeFile}`);
            }
        }
        
        // –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å –∫—ç—à–µ–º –ø–∞—Ä—Å–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        const jobCacheDir = path.join(JOB_CACHE_DIR, jobId);
        if (fsSync.existsSync(jobCacheDir)) {
            try {
                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                const deleteDir = async (dirPath) => {
                    const entries = await fs.readdir(dirPath, { withFileTypes: true });
                    
                    for (const entry of entries) {
                        const fullPath = path.join(dirPath, entry.name);
                        
                        if (entry.isDirectory()) {
                            await deleteDir(fullPath);
                        } else {
                            await fs.unlink(fullPath);
                        }
                    }
                    
                    await fs.rmdir(dirPath);
                };
                
                await deleteDir(jobCacheDir);
                console.log(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ç—à–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ —É–¥–∞–ª–µ–Ω–∞: ${jobCacheDir}`);
            } catch (dirError) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫—ç—à–∞: ${dirError.message}`);
            }
        }
        
        res.json({ success: true, message: '–í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' });
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ ${req.params.id}:`, error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é', details: error.message });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
app.post('/api/jobs/:id/parse', async (req, res) => {
    try {
        const jobId = req.params.id;
        console.log(`üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–∏: ${jobId}`);
        
        // –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–∏
        const job = await findJobById(jobId);
        if (!job) {
            return res.status(404).json({ error: '–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤–∞–∫–∞–Ω—Å–∏–∏ –µ—Å—Ç—å URL
        if (!job.link) {
            return res.status(400).json({ error: '–£ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞' });
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId} —Å URL ${job.link}`);
        const parsedData = await jobParser.parseJob(job.link, jobId, job);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é, –¥–æ–±–∞–≤–ª—è—è —Ñ–ª–∞–≥, —á—Ç–æ –æ–Ω–∞ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞
        const companyDir = path.join(JOBS_DIR, sanitizeFileName(job.company));
        const jobFile = path.join(companyDir, `${jobId}.json`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º JSON —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∞–∫–∞–Ω—Å–∏–∏
        const updatedJob = { ...job, parsed: true, parsedAt: parsedData.parsedAt };
        await fs.writeFile(jobFile, JSON.stringify(updatedJob, null, 2));
        console.log(`‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: ${jobFile}`);
        
        res.json({
            success: true,
            parsedData,
            message: '–í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞'
        });
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ${req.params.id}:`, error);
        res.status(500).json({ 
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é', 
            details: error.message 
        });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏–∏
app.get('/api/jobs/:id/parsed', (req, res) => {
    try {
        const jobId = req.params.id;
        console.log(`üìÑ –ó–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–∏: ${jobId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞ –ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è
        if (!jobParser.isJobParsed(jobId)) {
            return res.status(404).json({ error: '–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –±—ã–ª–∞ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏
        const parsedData = jobParser.getJobData(jobId);
        
        if (!parsedData) {
            return res.status(404).json({ error: '–î–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
        }
        
        res.json({
            success: true,
            parsedData
        });
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏–∏ ${req.params.id}:`, error);
        res.status(500).json({ 
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏', 
            details: error.message 
        });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
app.get('/api/jobs/:id/screenshot', (req, res) => {
    try {
        const jobId = req.params.id;
        console.log(`üì∑ –ó–∞–ø—Ä–æ—Å —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏: ${jobId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É
        const screenshotPath = jobParser.getJobScreenshotPath(jobId);
        
        if (!screenshotPath) {
            return res.status(404).json({ error: '–°–∫—Ä–∏–Ω—à–æ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if (!fsSync.existsSync(screenshotPath)) {
            return res.status(404).json({ error: '–§–∞–π–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        res.setHeader('Content-Type', 'image/png');
        res.setHeader('Content-Disposition', `inline; filename="screenshot_${jobId}.png"`);
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
        res.setHeader('Pragma', 'no-cache');
        res.setHeader('Expires', '0');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        console.log(`üì∑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ${screenshotPath}`);
        res.sendFile(screenshotPath);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ ${req.params.id}:`, error);
        res.status(500).json({ 
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏', 
            details: error.message 
        });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è HTML –≤–∞–∫–∞–Ω—Å–∏–∏
app.get('/api/jobs/:id/html', (req, res) => {
    try {
        const jobId = req.params.id;
        console.log(`üìÑ –ó–∞–ø—Ä–æ—Å HTML –≤–∞–∫–∞–Ω—Å–∏–∏: ${jobId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º HTML
        const html = jobParser.getJobHtml(jobId);
        
        if (!html) {
            return res.status(404).json({ error: 'HTML –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è HTML
        res.setHeader('Content-Type', 'text/html; charset=utf-8');
        res.setHeader('Content-Disposition', `inline; filename="job_${jobId}.html"`);
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
        res.setHeader('Pragma', 'no-cache');
        res.setHeader('Expires', '0');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML
        res.send(html);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ HTML –≤–∞–∫–∞–Ω—Å–∏–∏ ${req.params.id}:`, error);
        res.status(500).json({ 
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å HTML –≤–∞–∫–∞–Ω—Å–∏–∏', 
            details: error.message 
        });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–∏
app.get('/api/jobs/:id/text', (req, res) => {
    try {
        const jobId = req.params.id;
        console.log(`üìÑ –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–∏: ${jobId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
        const text = jobParser.getJobText(jobId);
        
        if (!text) {
            return res.status(404).json({ error: '–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        res.setHeader('Content-Type', 'text/plain; charset=utf-8');
        res.setHeader('Content-Disposition', `inline; filename="job_content_${jobId}.txt"`);
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
        res.setHeader('Pragma', 'no-cache');
        res.setHeader('Expires', '0');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        res.send(text);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ ${req.params.id}:`, error);
        res.status(500).json({ 
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏', 
            details: error.message 
        });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π
app.post('/api/parse-all-jobs', async (req, res) => {
    try {
        console.log(`üîÑ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π...`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        parseAllJobs().then(() => {
            console.log("üéâ –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω");
        });
        
        res.json({ success: true, message: "–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞–ø—É—â–µ–Ω" });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π:", error);
        res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π" });
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π
async function getAllJobs() {
    const jobs = [];
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        try {
            await fs.access(JOBS_DIR);
        } catch (error) {
            console.log('üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è jobs –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...');
            await fs.mkdir(JOBS_DIR, { recursive: true, mode: 0o777 });
            return jobs;
        }
        
        const companies = await fs.readdir(JOBS_DIR, { withFileTypes: true });
        const companyDirs = companies.filter(dirent => dirent.isDirectory());
        
        // –ï—Å–ª–∏ –ø–∞–ø–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        if (companyDirs.length === 0) {
            console.log('üìÅ –ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
            return jobs;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –≤—Å–µ–º –∫–æ–º–ø–∞–Ω–∏—è–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const jobPromises = companyDirs.map(async (companyDir) => {
            const companyPath = path.join(JOBS_DIR, companyDir.name);
            try {
                const files = await fs.readdir(companyPath);
                const jsonFiles = files.filter(file => file.endsWith('.json'));
                
                // –ß–∏—Ç–∞–µ–º –∫–∞–∂–¥—ã–π JSON-—Ñ–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏
                const companyJobPromises = jsonFiles.map(async (file) => {
                    try {
                        const filePath = path.join(companyPath, file);
                        const data = await fs.readFile(filePath, 'utf8');
                        const job = JSON.parse(data);
                        
                        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL –¥–ª—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API
                        if (job.coverLetterPath) {
                            job.coverLetterUrl = `/api/files/${companyDir.name}/${job.coverLetterPath}`;
                        }
                        if (job.resumePath) {
                            job.resumeUrl = `/api/files/${companyDir.name}/${job.resumePath}`;
                        }
                        
                        return job;
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${file}:`, error);
                        return null;
                    }
                });
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –≤–∞–∫–∞–Ω—Å–∏–π —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
                return (await Promise.all(companyJobPromises)).filter(job => job !== null);
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ ${companyDir.name}:`, error);
                return [];
            }
        });
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π
        const allCompanyJobs = await Promise.all(jobPromises);
        return allCompanyJobs.flat();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π:', error);
        throw error;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ ID
async function findJobById(jobId) {
    try {
        const allJobs = await getAllJobs();
        return allJobs.find(job => job.id === jobId) || null;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}:`, error);
        throw error;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏
async function parseAllJobs() {
    const jobs = await getAllJobs();
    
    let parsedCount = 0;
    let errorCount = 0;
    
    console.log(`üìä –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ ${jobs.length} –≤–∞–∫–∞–Ω—Å–∏–π...`);
    
    for (const job of jobs) {
        if (job.link && !jobParser.isJobParsed(job.id)) {
            try {
                console.log(`üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–∏ ${job.id}: ${job.position} –≤ ${job.company}`);
                await jobParser.parseJob(job.link, job.id, job);
                console.log(`‚úÖ –í–∞–∫–∞–Ω—Å–∏—è ${job.id} —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Ñ–ª–∞–≥–æ–º, —á—Ç–æ –æ–Ω–∞ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞
                const companyDir = path.join(JOBS_DIR, sanitizeFileName(job.company));
                const jobFile = path.join(companyDir, `${job.id}.json`);
                
                // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                const data = await fs.readFile(jobFile, 'utf8');
                const updatedJob = JSON.parse(data);
                updatedJob.parsed = true;
                updatedJob.parsedAt = new Date().toISOString();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
                await fs.writeFile(jobFile, JSON.stringify(updatedJob, null, 2));
                
                parsedCount++;
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ${job.id}:`, error);
                errorCount++;
            }
        } else if (!job.link) {
            console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é ${job.id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Å—ã–ª–∫–∞`);
        } else if (jobParser.isJobParsed(job.id)) {
            console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é ${job.id}: —É–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞`);
        }
    }
    
    console.log(`üìä –ò—Ç–æ–≥–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: —É—Å–ø–µ—à–Ω–æ - ${parsedCount}, —Å –æ—à–∏–±–∫–∞–º–∏ - ${errorCount}, –≤—Å–µ–≥–æ - ${jobs.length}`);
    return { parsedCount, errorCount, totalJobs: jobs.length };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ multer
app.use((err, req, res, next) => {
    if (err instanceof multer.MulterError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Multer:', err);
        return res.status(400).json({ 
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞', 
            details: err.message 
        });
    } else if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
        return res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 
            details: err.message 
        });
    }
    next();
});

// –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/status', (req, res) => {
    res.json({
        status: 'ok',
        version: '1.0.0',
        jobsDir: JOBS_DIR,
        jobCacheDir: JOB_CACHE_DIR,
        dataDir: DATA_DIR,
        timestamp: new Date().toISOString()
    });
});

// ==== –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è Vue —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ ====
// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Å–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–ø–∞–ø–∫–∞ dist) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø–∞–ø–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
const FRONTEND_DIST_DIR = path.join(__dirname, 'dist');
app.use(express.static(FRONTEND_DIST_DIR));
app.get('*', (req, res) => {
    res.sendFile(path.join(FRONTEND_DIST_DIR, 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: ${DATA_DIR}`);
    console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π: ${JOBS_DIR}`);
    console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫—ç—à–∞ –≤–∞–∫–∞–Ω—Å–∏–π: ${JOB_CACHE_DIR}`);
});
