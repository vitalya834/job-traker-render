import { defineStore } from "pinia";
import { ref } from "vue";
import axios from "axios";
import { normalizeStatus } from "@/constants/jobStatus";
const API_URL = "http://localhost:5000/api";

export const useJobStore = defineStore("job", () => {
  const jobs = ref([]);
  const loading = ref(false);
  const errorMessage = ref(null);

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤
  const handleError = (err, defaultMessage) => {
    console.error("‚ùå –û—à–∏–±–∫–∞:", defaultMessage, err);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
    const serverMessage = err.response?.data?.error || err.response?.data?.message;
    const finalMessage = serverMessage || defaultMessage || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞";
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    errorMessage.value = finalMessage;
    
    // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
    throw new Error(finalMessage);
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
  const fetchJobs = async (retryCount = 0) => {
    loading.value = true;
    errorMessage.value = null;
    
    try {
      console.log("üöÄ –ó–∞–ø—Ä–æ—Å –≤–∞–∫–∞–Ω—Å–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞:", `${API_URL}/jobs`);
      
      const response = await axios.get(`${API_URL}/jobs`, {
        timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });
      
      console.log("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.data);

      if (!Array.isArray(response.data)) {
        throw new Error("–û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤ –≤–∞–∫–∞–Ω—Å–∏–π, –ø–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç");
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      jobs.value = response.data.map(job => ({
        ...job,
        id: job.id || `job_${Date.now()}_${Math.random()}`,
      }));
      
      console.log("‚úÖ –í–∞–∫–∞–Ω—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ jobs.value:", jobs.value);
      return response.data;
    } catch (err) {
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–µ—Ç—å—é –∏ —É –Ω–∞—Å –µ—Å—Ç—å –µ—â–µ –ø–æ–ø—ã—Ç–∫–∏, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
      if ((err.code === 'ECONNABORTED' || err.message.includes('Network Error')) && retryCount < 3) {
        console.log(`‚ö†Ô∏è –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/3`);
        setTimeout(() => fetchJobs(retryCount + 1), 1000); // –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        return;
      }
      
      handleError(err, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–≤–µ—Ä.");
      jobs.value = [];
    } finally {
      loading.value = false;
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ ID
  const getJob = async (jobId) => {
    loading.value = true;
    errorMessage.value = null;
    
    try {
      console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å ID: ${jobId}`);
      
      const response = await axios.get(`${API_URL}/jobs/${jobId}`, {
        timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });
      
      console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è:", response.data);
      return response.data;
    } catch (err) {
      handleError(err, `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é —Å ID ${jobId}.`);
      return null;
    } finally {
      loading.value = false;
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —á–µ—Ä–µ–∑ POST-–∑–∞–ø—Ä–æ—Å
  const addJob = async (formData) => {
    loading.value = true;
    errorMessage.value = null;
    
    try {
      console.log("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏...");
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const response = await axios.post(`${API_URL}/jobs`, formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
        timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });
      
      console.log("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", response.data);
      await fetchJobs(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
      return response.data;
    } catch (err) {
      handleError(err, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é.");
    } finally {
      loading.value = false;
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ interviewDate –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∑–∞–º–µ—Ç–æ–∫
  // –ó–¥–µ—Å—å –¥–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä notes, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
  const updateJobStatus = async (jobId, status, notes = "", interviewDate = null) => {
    loading.value = true;
    errorMessage.value = null;
    
    try {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const normalizedStatus = normalizeStatus(status);
      
      console.log(
        `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId} –Ω–∞ ${normalizedStatus}` +
        (interviewDate ? ` —Å –¥–∞—Ç–æ–π –∏–Ω—Ç–µ—Ä–≤—å—é ${interviewDate}` : "")
      );
      
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –≤ JSON, –¥–æ–±–∞–≤–ª—è–µ–º notes
      const updateData = { status: normalizedStatus, notes };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∏–Ω—Ç–µ—Ä–≤—å—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      if (interviewDate) {
        updateData.interviewDate = interviewDate; // –∏–Ω—Ç–µ—Ä–≤—å—é –∫–∞–∫ ISO —Å—Ç—Ä–æ–∫–∞
      }

      console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:", JSON.stringify(updateData));
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const response = await axios.put(`${API_URL}/jobs/${jobId}`, updateData, {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 15000 // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });
      
      console.log("‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:", response.data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
      await fetchJobs();
      return response.data;
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:", err);
      console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", err.response?.data);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 400 Bad Request
      if (err.response?.status === 400) {
        const errorDetails = err.response.data?.error || JSON.stringify(err.response.data);
        handleError(err, `–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: ${errorDetails}`);
      } else {
        handleError(err, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞–∫–∞–Ω—Å–∏–∏.");
      }
    } finally {
      loading.value = false;
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–∏
  const updateJobNotes = async (jobId, notes) => {
    loading.value = true;
    errorMessage.value = null;
    
    try {
      console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}`);
      
      const response = await axios.put(`${API_URL}/jobs/${jobId}`, { notes }, {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 15000
      });
      
      console.log("‚úÖ –ó–∞–º–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:", response.data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
      await fetchJobs();
      
      return response.data;
    } catch (err) {
      handleError(err, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏.");
    } finally {
      loading.value = false;
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
  const removeJob = async (jobId) => {
    loading.value = true;
    errorMessage.value = null;
    
    try {
      console.log(`üóë –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}`);
      
      const response = await axios.delete(`${API_URL}/jobs/${jobId}`, {
        timeout: 15000 // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });
      
      console.log("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
      await fetchJobs();
      return response.data;
    } catch (err) {
      handleError(err, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é.");
    } finally {
      loading.value = false;
    }
  };

  // –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
  const parseJob = async (jobId) => {
    loading.value = true;
    errorMessage.value = null;
    
    try {
      console.log(`ü§ñ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}`);
      
      const response = await axios.post(`${API_URL}/jobs/${jobId}/parse`, {}, {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 60000 // 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç, —Ç.–∫. –ø–∞—Ä—Å–∏–Ω–≥ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è
      });
      
      console.log("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞:", response.data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–ª–∞–≥ –ø–∞—Ä—Å–∏–Ω–≥–∞
      await fetchJobs();
      return response.data;
    } catch (err) {
      handleError(err, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é.");
      return null;
    } finally {
      loading.value = false;
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏–∏
  const getParsedJob = async (jobId) => {
    loading.value = true;
    errorMessage.value = null;
    
    try {
      console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}`);
      
      const response = await axios.get(`${API_URL}/jobs/${jobId}/parsed`, {
        timeout: 15000 // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });
      
      console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", response.data);
      return response.data.parsedData;
    } catch (err) {
      handleError(err, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏.");
      return null;
    } finally {
      loading.value = false;
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
  const getJobScreenshotUrl = (jobId) => {
    return `${API_URL}/jobs/${jobId}/screenshot`;
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ HTML –≤–∞–∫–∞–Ω—Å–∏–∏
  const getJobHtmlUrl = (jobId) => {
    return `${API_URL}/jobs/${jobId}/html`;
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–∏
  const getJobTextUrl = (jobId) => {
    return `${API_URL}/jobs/${jobId}/text`;
  };

  // –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π
  const parseAllJobs = async () => {
    loading.value = true;
    errorMessage.value = null;
    
    try {
      console.log(`ü§ñ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π`);
      
      const response = await axios.post(`${API_URL}/parse-all-jobs`, {}, {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç, —Ç.–∫. –ø–∞—Ä—Å–∏–Ω–≥ –∏–¥–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      });
      
      console.log("‚úÖ –ó–∞–ø—É—â–µ–Ω –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π:", response.data);
      return true;
    } catch (err) {
      handleError(err, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π.");
      return false;
    } finally {
      loading.value = false;
    }
  };

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ ISO —Ñ–æ—Ä–º–∞—Ç
  const formatDateForAPI = (dateString) => {
    if (!dateString) return null;
    
    try {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) {
        console.error("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞:", dateString);
        return null;
      }
      return date.toISOString();
    } catch (error) {
      console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã:", error);
      return null;
    }
  };

  // –û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  const clearError = () => {
    errorMessage.value = null;
  };

  return {
    jobs,
    loading,
    errorMessage,
    fetchJobs,
    getJob,
    addJob,
    updateJobStatus,
    updateJobNotes,
    removeJob,
    parseJob,
    getParsedJob,
    getJobScreenshotUrl,
    getJobHtmlUrl,
    getJobTextUrl,
    parseAllJobs,
    formatDateForAPI,
    clearError
  };
});